﻿<cfcomponent hint="A cool utility that helps you when working with HTML, from creating doc types, to managing your js/css assets, to rendering tables and lists from data"			 output="false"			 extends="coldbox.system.plugins.htmlHelper"			 singleton><!------------------------------------------- PUBLIC HELPER METHODS ------------------------------------------>	<!--- textField --->	<cffunction name="textField" access="public" returntype="any" output="false" hint="Render out a text field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string"	required="false" default="" hint="The name of the field"/>		<cfargument name="value"				type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled"				type="boolean"	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly"				type="boolean"	required="false" default="false" hint="Readonly"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the field"/>		<cfargument name="wrapper"				type="string"	required="false" default="div" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="controls" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="control-label" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="p" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="help-block" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="div" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="control-group" hint="The class to assign to the group wrapper. Empty by default"/>		<cfargument name="bind"					type="any"		required="false" default="" hint="The entity binded to this control"/>		<cfargument name="bindProperty"			type="any"		required="false" default="" hint="The property to use for the value, by convention we use the name attribute"/>		<cfscript>			arguments.type="text";			return inputField(argumentCollection=arguments);		</cfscript>	</cffunction>	<!--- dateTimeField --->	<cffunction name="dateTimeField" access="public" returntype="any" output="false" hint="Render out a date time field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string"	required="false" default="" hint="The name of the field"/>		<cfargument name="value"				type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled"				type="boolean"	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly"				type="boolean"	required="false" default="false" hint="Readonly"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the field"/>		<cfargument name="wrapper"				type="string"	required="false" default="div" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="controls" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="control-label" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="p" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="help-block" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="div" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="control-group" hint="The class to assign to the group wrapper. Empty by default"/>		<cfargument name="bind"					type="any"		required="false" default="" hint="The entity binded to this control"/>		<cfargument name="bindProperty"			type="any"		required="false" default="" hint="The property to use for the value, by convention we use the name attribute"/>		<cfscript>			// super.inputField(argumentCollection=arguments);			var buffer 		= createObject("java","java.lang.StringBuffer").init('');			var excludeList = "label,help,wrapper,wrapperclass,labelclass,labelwrapper,labelwrapperclass,helpwrapper,helpwrapperclass,groupwrapper,groupwrapperclass,bind,bindproperty,help";			// ID Normalization			normalizeID(arguments);			// group wrapper?			wrapTag(buffer,arguments.groupwrapper,0,arguments.groupwrapperclass);			// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.id,content=arguments.label,wrapper=arguments.labelWrapper,class=arguments.labelClass,wrapperclass=arguments.labelWrapperClass) ); }			// wrapper?			wrapTag(buffer,arguments.wrapper,0,arguments.wrapperclass);			// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }			// readonly fix			if( arguments.readonly ){ arguments.readonly = "readonly"; }			else{ arguments.readonly = ""; }			// binding?			bindValue(arguments);			// create textarea			buffer.append("<input type='text'");			flattenAttributes(arguments,excludeList,buffer).append("/>");			// add container for our date time picker			buffer.append("<span id='meetingdate_cal'></span>");			// help text?			if( len(arguments.help) ){ buffer.append( this.help(content=arguments.help,wrapper=arguments.helpWrapper,wrapperclass=arguments.helpWrapperClass) ); }			// wrapper?			wrapTag(buffer,arguments.wrapper,1);			// group wrapper?			wrapTag(buffer,arguments.groupwrapper,1);			return buffer.toString();		</cfscript>	</cffunction>	<!--- passwordField --->	<cffunction name="passwordField" access="public" returntype="any" output="false" hint="Render out a password field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string"	required="false" default="" hint="The name of the field"/>		<cfargument name="value"				type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled"				type="boolean"	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly"				type="boolean"	required="false" default="false" hint="Readonly"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the field"/>		<cfargument name="wrapper"				type="string"	required="false" default="div" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="controls" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="control-label" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="p" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="help-block" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="div" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="control-group" hint="The class to assign to the group wrapper. Empty by default"/>		<cfargument name="bind" 		type="any" 		required="false" default="" hint="The entity binded to this control"/>		<cfargument name="bindProperty"			type="any" 		required="false" default="" hint="The property to use for the value, by convention we use the name attribute"/>		<cfscript>			arguments.type="password";			return inputField(argumentCollection=arguments);		</cfscript>	</cffunction>	<!--- fileField --->	<cffunction name="fileField" access="public" returntype="any" output="false" hint="Render out a file field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string"	required="false" default="" hint="The name of the field"/>		<cfargument name="value"				type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled"				type="boolean"	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly"				type="boolean"	required="false" default="false" hint="Readonly"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the field"/>		<cfargument name="wrapper"				type="string"	required="false" default="div" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="controls" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="control-label" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="p" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="help-block" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="div" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="control-group" hint="The class to assign to the group wrapper. Empty by default"/>		<cfscript>			arguments.type="file";			return inputField(argumentCollection=arguments);		</cfscript>	</cffunction>	<!--- inputField --->	<cffunction name="inputField" output="false" access="public" returntype="any" hint="Create an input field using some cool tags and features.	Any extra arguments are passed to the tag">		<cfargument name="type"					type="string"	required="false" default="text" hint="The type of input field to create"/>		<cfargument name="name"					type="string"	required="false" default="" hint="The name of the field"/>		<cfargument name="value"				type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled"				type="boolean"	required="false" default="false" hint="Disabled"/>		<cfargument name="checked"				type="boolean"	required="false" default="false" hint="Checked"/>		<cfargument name="readonly"				type="boolean"	required="false" default="false" hint="Readonly"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the field"/>		<cfargument name="wrapper"				type="string"	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the group wrapper. Empty by default"/>		<cfargument name="bind"					type="any"		required="false" default="" hint="The entity binded to this control"/>		<cfargument name="bindProperty"			type="any"		required="false" default="" hint="The property to use for the value, by convention we use the name attribute"/>		<cfscript>			// super.inputField(argumentCollection=arguments);			var buffer 		= createObject("java","java.lang.StringBuffer").init('');			var excludeList = "label,help,wrapper,wrapperclass,labelclass,labelwrapper,labelwrapperclass,helpwrapper,helpwrapperclass,groupwrapper,groupwrapperclass,bind,bindproperty,help";			// ID Normalization			normalizeID(arguments);			//group wrapper?			wrapTag(buffer,arguments.groupwrapper,0,arguments.groupwrapperclass);			// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.id,content=arguments.label,wrapper=arguments.labelWrapper,class=arguments.labelClass,wrapperclass=arguments.labelWrapperClass) ); }			//wrapper?			wrapTag(buffer,arguments.wrapper,0,arguments.wrapperclass);			// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }			// checked fix			if( arguments.checked ){ arguments.checked = "checked"; }			else{ arguments.checked = ""; }			// readonly fix			if( arguments.readonly ){ arguments.readonly = "readonly"; }			else{ arguments.readonly = ""; }			// binding?			bindValue(arguments);			// create textarea			buffer.append("<input");			flattenAttributes(arguments,excludeList,buffer).append("/>");			//help text?			if( len(arguments.help) ){ buffer.append( this.help(content=arguments.help,wrapper=arguments.helpWrapper,wrapperclass=arguments.helpWrapperClass) ); }			//wrapper?			wrapTag(buffer,arguments.wrapper,1);			//group wrapper?			wrapTag(buffer,arguments.groupwrapper,1);			return buffer.toString();		</cfscript>	</cffunction>	<!--- textArea --->	<cffunction name="textArea" access="public" returntype="any" output="false" hint="Render out a textarea. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string" 	required="false" default="" hint="The name of the textarea"/>		<cfargument name="cols"					type="numeric" 	required="false" hint="The number of columns"/>		<cfargument name="rows"					type="numeric" 	required="false" hint="The number of rows"/>		<cfargument name="value"				type="string"	required="false" default="" hint="The value of the textarea"/>		<cfargument name="disabled"				type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly"				type="boolean" 	required="false" default="false" hint="Readonly"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the textarea"/>		<cfargument name="wrapper"				type="string"	required="false" default="div" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="controls" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="control-label" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="p" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="help-block" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="div" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="control-group" hint="The class to assign to the group wrapper. Empty by default"/>		<cfargument name="bind"					type="any" 		required="false" default="" hint="The entity binded to this control, the value comes by convention from the name attribute"/>		<cfargument name="bindProperty"			type="any" 		required="false" default="" hint="The property to use for the value, by convention we use the name attribute"/>		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');			var excludeList = "value,label,help,wrapper,wrapperclass,labelclass,labelwrapper,labelwrapperclass,helpwrapper,helpwrapperclass,groupwrapper,groupwrapperclass,bind,bindproperty";			// ID Normalization			normalizeID(arguments);			//group wrapper?			wrapTag(buffer,arguments.groupwrapper,0,arguments.groupwrapperclass);			// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.id,content=arguments.label,wrapper=arguments.labelWrapper,class=arguments.labelClass,wrapperclass=arguments.labelWrapperClass) ); }			//wrapper?			wrapTag(buffer,arguments.wrapper,0,arguments.wrapperclass);			// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }			// readonly fix			if( arguments.readonly ){ arguments.readonly = "readonly"; }			else{ arguments.readonly = ""; }			// Entity Binding?			bindValue(arguments);			// create textarea			buffer.append("<textarea");			flattenAttributes(arguments,excludeList,buffer).append(">#arguments.value#</textarea>");			//help text?			if( len(arguments.help) ){ buffer.append( this.help(content=arguments.help,wrapper=arguments.helpWrapper,wrapperclass=arguments.helpWrapperClass) ); }			//wrapper?			wrapTag(buffer,arguments.wrapper,1);			//group wrapper?			wrapTag(buffer,arguments.groupwrapper,1);			return buffer.toString();		</cfscript>	</cffunction>	<!--- select --->	<cffunction name="select" access="public" returntype="any" output="false" hint="Render out a select tag. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string" 	required="false" default="" hint="The name of the field"/>		<cfargument name="options"				type="any"		required="false" default="" hint="The value for the options, usually by calling our options() method"/>		<!--- option arguments --->		<cfargument name="column"				type="string" 	required="false" default=""	hint="If using a query or array of objects the column to display as value and name"/>		<cfargument name="nameColumn"			type="string" 	required="false" default=""	hint="If using a query or array of objects, the name column to display, if not passed defaults to the value column"/>		<cfargument name="selectedIndex"		type="numeric" 	required="false" default="0" hint="selected index"/>		<cfargument name="selectedValue"		type="string" 	required="false" default="" hint="selected value if any"/>		<cfargument name="bind"					type="any" 		required="false" default="" hint="The entity binded to this control"/>		<cfargument name="bindProperty"			type="any" 		required="false" default="" hint="The property to use for the value, by convention we use the name attribute"/>		<!--- html arguments --->		<cfargument name="disabled"				type="boolean" 	required="false" default="false" hint="Disabled button or not?"/>		<cfargument name="multiple"				type="boolean" 	required="false" default="false" hint="multiple button or not?"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the textarea"/>		<cfargument name="wrapper"				type="string"	required="false" default="div" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="controls" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="control-label" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="p" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="help-block" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="div" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="control-group" hint="The class to assign to the group wrapper. Empty by default"/>		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');			var excludeList = "options,column,nameColumn,selectedIndex,selectedValue,bind,bindProperty,help,wrapper,wrapperclass,labelclass,labelwrapper,labelwrapperclass,helpwrapper,helpwrapperclass,groupwrapper,groupwrapperclass";			// ID Normalization			normalizeID(arguments);			//group wrapper?			wrapTag(buffer,arguments.groupwrapper,0,arguments.groupwrapperclass);			// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.id,content=arguments.label,wrapper=arguments.labelWrapper,class=arguments.labelClass,wrapperclass=arguments.labelWrapperClass) ); }			//wrapper?			wrapTag(buffer,arguments.wrapper,0,arguments.wrapperclass);			// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }			// multiple fix			if( arguments.multiple ){ arguments.multiple = "multiple"; }			else{ arguments.multiple = ""; }			// create select			buffer.append("<select");			flattenAttributes(arguments,excludeList,buffer).append(">");			// binding of option			bindValue(arguments);			if( structKeyExists(arguments,"value") AND len(arguments.value) ){				arguments.selectedValue = arguments.value;			}			// options, are they inflatted already or do we inflate			if( isSimpleValue(arguments.options) AND findnocase("</option>",arguments.options) ){				buffer.append( arguments.options );			}			else{				buffer.append( this.options(arguments.options,arguments.column,arguments.nameColumn,arguments.selectedIndex,arguments.selectedValue) );			}			// finalize select			buffer.append("</select>");			//help text?			if( len(arguments.help) ){ buffer.append( this.help(content=arguments.help,wrapper=arguments.helpWrapper,wrapperclass=arguments.helpWrapperClass) ); }			//wrapper?			wrapTag(buffer,arguments.wrapper,1);			//group wrapper?			wrapTag(buffer,arguments.groupwrapper,1);			return buffer.toString();		</cfscript>	</cffunction>	<!--- checkBox --->	<cffunction name="checkBox" access="public" returntype="any" output="false" hint="Render out a checkbox. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string"	required="false" default="" hint="The name of the field"/>		<cfargument name="value"				type="string"	required="false" default="true" hint="The value of the field, defaults to true"/>		<cfargument name="disabled"				type="boolean"	required="false" default="false" hint="Disabled"/>		<cfargument name="checked"				type="boolean"	required="false" default="false" hint="Checked"/>		<cfargument name="help"					type="string"	required="false" default="" hint="The help text to display for the textarea"/>		<cfargument name="wrapper"				type="string"	required="false" default="div" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="controls" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="label"				type="string"	required="false" default="" hint="If passed we will prepend a label tag"/>		<cfargument name="labelclass"			type="string"	required="false" default="control-label" hint="The class to assign to the label"/>		<cfargument name="labelwrapper"			type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="labelwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the label wrapper"/>		<cfargument name="helpwrapper"			type="string"	required="false" default="p" hint="The wrapper tag to use around the help text. Empty by default">		<cfargument name="helpwrapperclass"		type="string"	required="false" default="help-block" hint="The class to assign to the help wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="div" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="control-group" hint="The class to assign to the group wrapper. Empty by default"/>		<cfargument name="bind"					type="any"		required="false" default="" hint="The entity binded to this control"/>		<cfargument name="bindProperty"			type="any"		required="false" default="" hint="The property to use for the value, by convention we use the name attribute"/>		<cfscript>			arguments.type="checkbox";			return inputField(argumentCollection=arguments);		</cfscript>	</cffunction>	<!--- submitButton --->	<cffunction name="submitButton" access="public" returntype="any" output="false" hint="Render out a submit button. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name"					type="string"	required="false" default="" hint="The name of the field"/>		<cfargument name="value"				type="string"	required="false" default="Submit" hint="The value of the field"/>		<cfargument name="disabled"				type="boolean"	required="false" default="false" hint="Disabled"/>		<cfargument name="wrapper"				type="string"	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"			type="string"	required="false" default="" hint="The class to assign to the wrapper. Empty by default">		<cfargument name="groupwrapper"			type="string"	required="false" default="" hint="The group wrapper tag to use around the whole works. Empty by default"/>		<cfargument name="groupwrapperclass"	type="string"	required="false" default="" hint="The class to assign to the group wrapper. Empty by default"/>		<cfscript>			arguments.type="submit";			return inputField(argumentCollection=arguments);		</cfscript>	</cffunction>	<!--- label --->	<cffunction name="label" access="public" returntype="any" output="false" hint="Render a label tag. Remember that any extra arguments are passed as tag attributes">		<cfargument name="field" 		type="string" required="true"	hint="The for who attribute"/>		<cfargument name="content" 		type="string" required="false" default="" hint="The label content. If not passed the field is used"/>		<cfargument name="wrapper" 		type="string" required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"	type="string" required="false" default="" hint="The class to assign to the label wrapper. Empty by default">		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');			// wrapper?			wrapTag(buffer,arguments.wrapper,0,arguments.wrapperclass);			// get content			if( NOT len(content) ){ arguments.content = makePretty(arguments.field); }			arguments.for = arguments.field;			// create label tag			buffer.append("<label");			flattenAttributes(arguments,"content,field,wrapper",buffer).append(">#arguments.content#</label>");			//wrapper?			wrapTag(buffer,arguments.wrapper,1);			return buffer.toString();		</cfscript>	</cffunction>	<!--- help --->	<cffunction name="help" access="public" returntype="any" output="false" hint="Render the help text.">		<cfargument name="content" 		type="string" required="false" default="" hint="The label content. If not passed the field is used"/>		<cfargument name="wrapper" 		type="string" required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="wrapperclass"	type="string" required="false" default="" hint="The class to assign to the help wrapper. Empty by default">		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');			// wrapper?			wrapTag(buffer,arguments.wrapper,0,arguments.wrapperclass);			//write help text to buffer			buffer.append(arguments.content);			//wrapper?			wrapTag(buffer,arguments.wrapper,1);			return buffer.toString();		</cfscript>	</cffunction>	<!--- wrapTag --->	<cffunction name="wrapTag" output="false" access="private" returntype="any">		<cfargument name="buffer">		<cfargument name="tag">		<cfargument name="end" required="false" default="false">		<cfargument name="tagclass" required="false" default="">		<cfscript>			var slash = "";			if( len(arguments.tag) ){				if( arguments.end ){ slash = "/"; }				if( len(arguments.tagclass) ) {					arguments.buffer.append("<#slash##arguments.tag# class='#arguments.tagclass#'>");				} else {					arguments.buffer.append("<#slash##arguments.tag#>");				}			}		</cfscript>	</cffunction></cfcomponent>